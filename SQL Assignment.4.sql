use mavenmovies;
Select * from film;
Select * from customer;
Select * from rental;
Select * from payment;
Select * from category;
Select * from inventory;
Select * from film_category;
Select * from store;
-- 1. **Rank the customers based on the total amount they've spent on rentals.*
Select customer_id,sum(amount) as total_amount, rank() over(order by sum(amount) desc) as Customer_rank
from payment group by customer_id;

-- 2. **Calculate the cumulative revenue generated by each film over time.*
Select f.title, p.payment_date, sum(p.amount)  as Total_sum,
sum(sum(p.amount)) over( rows between unbounded preceding and current row ) as Cumulative_Revanue 
from payment p
join rental r on p.rental_id = r.rental_id
join inventory i on r.inventory_id = i.inventory_id
join film f on f.film_id = i.film_id
group by f.title,p.payment_id;

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
Select * from (Select film_id, title, length, avg(rental_duration) over( partition by title ) rental_avg from film) t
Where length = rental_avg;

-- 4. **Identify the top 3 films in each category based on their rental counts.*
Select * from (SELECT  fc.film_id, f.title, c.name, COUNT(r.rental_id) over(partition by c.name) rental_count,
        row_number() OVER (PARTITION BY c.name ) AS ranking
    FROM film_category fc
    JOIN rental r ON fc.film_id = r.inventory_id
    JOIN film f ON fc.film_id = f.film_id
    join category c on fc.category_id = c.category_id) t
    where ranking <= 3
    order by t.rental_count desc;
    
-- *Calculate the difference in rental counts between each customer's total rentals and the average rentals 
-- across all customers.
Select c.customer_id,c.first_name, count(r.rental_id) total_rental,avg(count(r.rental_id)) over() avg_rental,
 (count(r.rental_id)-avg(count(r.rental_id)) over()) total_and_avg_diffrence
from rental r
join customer c
on r.customer_id = c.customer_id
group by c.customer_id,c.first_name;

-- 6. **Find the monthly revenue trend for the entire rental store over time.*
Select date_format(payment_date, '%m') as months, sum(amount) as revanue
from payment 
group by date_format(payment_date,'%m');

--  7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.*
select * from ( Select c.customer_id, c.first_name,  percent_rank() over(order by amount desc ) as total_spending from customer c
join payment p on c.customer_id = p.customer_id) t
WHERE t.total_spending <= 0.2
group by t.customer_id, t.first_name;

-- 8. Calculate the running total of rentals per category, ordered by rental count.**

WITH RentalCounts AS (
    SELECT c.name AS category_name,
        COUNT(r.rental_id) AS rental_count,
        ROW_NUMBER() OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id) desc) AS rn
    FROM category c
    LEFT JOIN
        film_category fc ON c.category_id = fc.category_id
    LEFT JOIN
        film f ON fc.film_id = f.film_id
    LEFT JOIN
        inventory i ON f.film_id = i.film_id
    LEFT JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        c.name
)
SELECT category_name, rental_count,
    SUM(rental_count) OVER (ORDER BY rn) AS running_total
FROM RentalCounts
ORDER BY
    rental_count DESC;
    
    
-- Q.9 *Find the films that have been rented less than the average rental count for their respective categories

    
    Select * from (Select title, name, count(rental_id) as count_of_rental, avg(count(rental_id)) 
over (partition by name)as avg_rental
from film f join film_category fc
on f.film_id = fc.film_id
join category c
on c.category_id = fc.category_id
join inventory i
on f.film_id = i.film_id
join rental r 
on r.inventory_id = i.inventory_id
group by title, name) t
where t.count_of_rental < t.avg_rental;

-- 10.*Identify the top 5 months with the highest revenue and display the revenue generated in each month.*
Select monthname(payment_date) as months, sum(amount) Revanue ,
row_number() over(order by sum(amount)desc)  from payment 
group by months limit 5;
